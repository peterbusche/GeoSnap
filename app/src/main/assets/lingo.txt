*Bottom Sheet   -> like google maps
Bottom Toolbar
Bottom Navigation
*Floating Action Buttons  -> Zoom in/out

=======ENVIRONMENT VARIABLES LIST=============
PS C:\Users\peter\AndroidStudioProjects\MapApp2> $env:PATH -split ";"


=======USE EXIFtool===========
PS C:\Users\peter\AndroidStudioProjects\MapApp2> & "C:\Program Files\ExifTool\exiftool-13.11_64\exiftool.exe" -ver

PS C:\Users\peter\AndroidStudioProjects\MapApp2> exiftool -ver
13.11

PS C:\Users\peter\AndroidStudioProjects\MapApp2> exiftool "C:\Users\peter\AndroidStudioProjects\MapApp2\app\src\main\assets\1.jpg"


========ADB=========
==Created folder /sdcard/DCIM/Camera
==Uploaded images to that folder
==Added /Sdk/Platform-tools to system path to use ADB

PS C:\Users\peter\AndroidStudioProjects\MapApp2> adb shell am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:///sdcard/DCIM/Camera/






==========Differences Asking Permissions for Storage vs Location==============
//LOCATION EXAMPLE
// Check for location permission
if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_PERMISSION);
} else {
    accessLocation(); // Simulates location interaction
}

// Handle permission result
@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    if (requestCode == REQUEST_LOCATION_PERMISSION) {
        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            accessLocation();
        } else {
            Toast.makeText(this, "Location permission is required.", Toast.LENGTH_SHORT).show();
        }
    }
}

private void accessLocation() {
    // Simulated location interaction
    Log.d("Example", "Accessing location...");
}





//STORAGE EXAMPLE
// Check if permission is already granted
if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
    // Explain to the user if necessary
    if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {
        Toast.makeText(this, "Storage permission is needed to access photos.", Toast.LENGTH_SHORT).show();
    }

    // Request the permission
    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_STORAGE_PERMISSION);
} else {
    // Permission is already granted
    accessStorage(); // Simulates storage interaction
}

// Handle permission result
@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    if (requestCode == REQUEST_STORAGE_PERMISSION) {
        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            accessStorage();
        } else {
            Toast.makeText(this, "Storage permission is required.", Toast.LENGTH_SHORT).show();
        }
    }
}

private void accessStorage() {
    // Simulated storage interaction
    Log.d("Example", "Accessing storage...");
}








============================URI (Uniform Resource Identifier) ===========================
A Uniform Resource Identifier (URI) is a string that identifies a resource (e.g., a file, a web page, or an image) on a system
In Android:
    URIs are used to access resources such as files, database entries, or content provided by other apps.
    URIs can point to:
        A location on the web (https://example.com/image.jpg).
        A resource in your app (content://media/external/images/media/12345).

How URIs Work in MediaStore:
    Each media file (image, video, etc.) is indexed and associated with a content URI.
    URI Example: content://media/external/images/media/12345
        Scheme: content indicates it's from a content provider (like MediaStore).
        Authority: media specifies the content provider.
        Path: /external/images/media/12345 indicates it's an image stored on external storage with ID 12345.

    When Downloaded:
        A downloaded image initially exists as a file in the Downloads folder or the app's private storage.
    It does not inherently have a URI tied to it unless:
        Your app generates one, or
        The file is indexed by MediaStore.
    Indexing by MediaStore:
        If the image is saved to a public directory (e.g., Downloads or DCIM), MediaStore will eventually scan and index it, assigning a URI.
    Pre-Existing URIs:
        If the image is downloaded from the internet, it might have a URI in its original context (e.g., https://example.com/image.jpg).
        This URI is different from the content:// URI assigned when the image is indexed on the device.




Key Takeaways
    URIs in MediaStore:
        URIs are unique identifiers assigned to media files indexed by Android.
        Youâ€™re retrieving these URIs from MediaStore rather than creating them.
    How URIs Are Built:
        Base URI (MediaStore.Images.Media.EXTERNAL_CONTENT_URI) + Unique ID (_ID) = Complete URI.
    Downloaded Images:
        Do not inherently have a URI upon download.
        They get a URI if saved to a public directory and indexed by MediaStore.
    URI Format:
        Strings encapsulated by the Uri class, which Android uses to locate resources.


















